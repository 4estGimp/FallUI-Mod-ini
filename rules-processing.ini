;
; Dynamic item classification and processing rules - User custom rules
; ====================================================================
; 
; Contain your custom rules for item classification. 
; Use this file to add your own custom rules, which wont be overwritten by ComplexSorter updates. 
; Rules in this file have HIGHER priority than default rules.
; 
; Foreword
; --------
;   Maybe just take a look at the existing rules in this file and in the default rules-processing.ini (in neighbor folder).
;   If you have some technical experience, you should feel familiar quickly.
;
; Format
; ------
;   The section is the target record type, e.g. [WEAP] for weapons.
;   Each line represents one rule. 
;   The part before "=" contains the conditions - See Conditions
;   The part after "=" is the internal TagIdent (or some "SPECIAL:") - See TagIdent
;   Lines beginning with ";" are comments. So you can write notes or just make a rule inactive.
;
; Conditions
; ----------
;   The rules have a mighty set of possible matching tests, you can check for most everything available in FO4Edit. 
; 
;   Syntax for a LINE: [Condition 1], [Condition 2],... = [TagIdent]
;      ALL conditions must match to apply the TagIdent. When a TagIdent is found, the ruleset will stops. 
;
;   Syntax for a [Condition]: (not) [Property] [CompareOperator] (Value)
;       - Example: KEYWORDS contains "ObjectTypeWater" = drink
;           - Description: If the item has the keyword "ObjectTypeWater", it gets the TagIdent "drink".
;       - Possible [Property]: MANY. Look at FO4Edit. Examples: KEYWORDS, EFFECTS, EDID, "Full - Name", "ENIT\Sound - Consume"...
;           - TIP: Many property names in FO4Edit have a short form. So "PTRN" is the same as "PTRN - Preview Transform".
;                  Sometimes FO4Edit has inconsequent naming, like the "Model\MODL - FileName" can only access by "Model\MODL". You just have to try to find the correct identifer...
;           - KEYWORDS and EFFECTS are special properties for easy checking of contained keywords. (But no partial text match here!)
;       - Possible [CompareOperator]: All operators can combined with pre-operator "not"
;             equals, contains,  beginsWith, exists, numEquals, greaterThan, lessThan, hasFlag, hasOnlyFlags
;         - Some operators only work on correct types, e.g. hasFlag only works for the "Flags"-Type.
;         - Operator "exists" have no third parameter "(Value)".
;       - Possible [Value]: All you can find in FO4Edit. If the value contains whitespaces it must be "quoted". 
;         - You can type in multiple values separated by "|". The [Condition] is true, if any of its values matches (also for op. "equals").
;
;    2) Special conditions (Note: Have no CompareOperator or Value)
;         - SPECIAL:IsArmor    - Is true for apparel that is classified as armor by Complex Sorter.
;         - SPECIAL:MasterESP allows you to apply rules based on the source Master-ESP file. 
;
;    3) "*" - Match anything, so it gets applied always. 
; 
; TagIdent
; --------
;   The TagIdent refers to tags.ini, which will determine the final [Tag].
;   Example: The TagIdent "HuntingRifle" will be converted the tag "[HuntingRifle]" for the FallUI tag set. 
;            And for the Ruddy88 Original Set it will be converted to the tag "[Ranged]".
;
;   Special TagIdents (functions)
;         - SPECIAL:FindCustomTag:*  - Starts a sub-call to the naming rules, searching for a more precise item tag. Rules continue if nothing is found.
;         - SPECIAL:AddKeyword:*     - Add a keyword to the record
;         - SPECIAL:RemoveINRD       - Removes the INRD entry from the record.
;         - SPECIAL:PregReplace:[Field]:[Preg]:[String] - Perform a [Preg] replace on the record [Field] to [String]
;                                                       Example.: SPECIAL:PregReplace:FULL:"(\s*\{\{\{[^{}]*\}\}\})":""
; 
; Rules priority (first applied first) 
; --------------
; 1) User's custom rules for a mod           from "Rules (User)\[Mod].ini"
; 2) User's custom rules           from THIS FILE "Rules (User)\rules-processing.ini"
; 3) Default rules for mods                  from "Rules (Mods)\[Mod].ini"
; 4) Default rules                           from "Rules (Default)\rules-processing.ini"
; 5) Plugin rules (will always be applied after a TagIdent is found)
; 
; Section priority
; ----------------
; The [ALL]-Section is processed AFTER the [RECORD TYPE]-section
;
; TIPS
; ----
; * For quick testing select only one or two record type(s) in the GUI. 
;    - This just updates the selected records and leave the others as they are.
; * Try the Ctrl+Y hotkey for quick starting Complex Sorter in FO4Edit. 
;     - After the GUI is visible, the "Generate"-button is focues, so you can start the generation instantly by pressing ENTER
; * If you want to share your rules with other players, make them language-independent (just dont use "Full - Name")
;   and as specific as possible (EDID is for example unique for a item, while matching a keyword can match many other items).

 
; ====================
; USER Prefilter rules
; ====================
;
; Will applied before any further actions.
; Allows two FLAGS: 
;    IGNORE  Will filter the item. (So it dont get modified)
;    KEEP    Will prevent the item from filtered by later rules (If you want to modify it)


[prefilter:ALL]
;Example - Skip a mod entirely (So you must not deselect it in gui)
;SPECIAL:MasterESP equals "Mod i want to skipped" = IGNORE


[prefilter:ARMO]
; Mining helmet should not be automatically tagged as it is tagged in an UFO4P INNR
EDID equals Armor_MiningHelmet = IGNORE

; I made a custom Raider INNR for the armor pieces where they are tagged. || Disable if tagging raiders by slot
;KEYWORDS contains dn_armor_RaiderMod = IGNORE

; Super Mutant Redux will be tagged as "non_human" through standard rule if not turned off.  Tagging of SMR is handled through 4 custom INNRs but check for escapes.  LOTS OF ESCAPES.  It requires some automatic tagging.	
;RNAM contains SuperMutantRace = IGNORE
;RNAM contains HumanChildRace = IGNORE

; Synth armor is later tagged in Synth Overhaul custom INNRs
KEYWORDS contains "ma_armor_CAST|ma_underarmor_CAST" = IGNORE


[prefilter:AMMO]


[prefilter:ALCH]


[prefilter:LVLI]

[prefilter:MESG]
not EDID contains Radio|Relay = IGNORE

[prefilter:MISC]
;Example - Ignore a mass of items with EDID beginsWith filter
;EDID beginsWith "SS2_Plot|SS2_NameHolder|SS2_SLCP_" = IGNORE



[prefilter:QUST]
; No rules for QUST for now
; ****** I have some tagging rules for quests *** set to KEEP.
* = KEEP


[prefilter:WEAP]
; DefenseGun has it's own custom INNR for naming and tagging all as SMB.
EDID equals DefenseGun = IGNORE
;Example - Filter all items out with no visible model
;not "Model\MODL" exists = IGNORE

; =====================
; USER Processing rules
; =====================
; This are the main processing rules, which can define every action of Complex Sorter. 


[ALCH]
;Example - Add [Device] to a item identified by EDID
;EDID equals SS2_TownMeetingGavel = device


[AMMO]


[ARMO]
;Example - Add [Dress] to a item identified by Name
;"Full - Name" contains "Dress" = dress

; Special keywords:
;  BP as short for "BOD2 - Biped Body Template\First Person Flags"
;  BPNotFace - contains all flags of BP which are not in head region
; Special processing: If the apparel classified as "armor" then TagIdent e.g. "helm" will prefer "helm-armor" if exists. Same for "clothes".


; This section for class/faction tagging
; Supermutant tags almost Handled through INNR - it was attempted and didn't really work
;RNAM contains SuperMutantRace=smut  
EDID beginsWith "DLC01" = robot
EDID beginsWith "DWT_DCG_" = set_dcguard
; Added Biosuits to rules/tags/DEF_INV_TAGS and TABS
EDID equals Armor_HazmatSuit = Biosuit


; Clothing and Underarmor tagging for some mods like Eli's and Minutemen - verify and list mods on spreadsheet.
not SPECIAL:IsArmor, BP:flagsCount numEquals 1, BP hasFlag "33 - BODY" = underwear
SPECIAL:IsArmor, BP:flagsCount numEquals 1, BP hasFlag "33 - BODY" = Underarmor
not SPECIAL:IsArmor, BP:flagsCount numEquals 3, BP hasFlag "33 - BODY", BP hasFlag "34 - L Hand", BP hasFlag "35 - R Hand" = underwear
SPECIAL:IsArmor, BP:flagsCount numEquals 3, BP hasFlag "33 - BODY", BP hasFlag "34 - L Hand", BP hasFlag "35 - R Hand" = Underarmor

; Mercenary tagging
EDID equals "Armor_B90_Jetpack" = PowerTorso

;  Packs for multiple old school mods
EDID contains "Holster" = Pack
"Full - Name" contains "Backpack|Bag|Satchel" = Pack

; Power armor by Slot - each piece of armor is tagged
; Nope - this  is handled with dn_PowerArmor or in individual custom PA .ini files 
;KEYWORDS equals dn_PowerArmor_Helmet=PowerHelm
;KEYWORDS equals dn_PowerArmor_LeftArm=PowerArmL
;KEYWORDS equals dn_PowerArmor_RightArm=PowerArmR
;KEYWORDS equals dn_PowerArmor_Torso=PowerTorso
;KEYWORDS equals dn_PowerArmor_LeftLeg=PowerLegL
;KEYWORDS equals dn_PowerArmor_RightLeg=PowerLegR


[BOOK]


[KEYM]


[LVLI]

[MESG]
EDID contains Radio|Relay = radio

[MISC]


;[NOTE]
;EDID beginsWith "OWR_|OWR2_" = Settings
;Example - Explicitly mark a item as [Settings]
;EDID beginsWith SS2_Holotape_CityManager = settings

;Example - Mark holotape's as normal holotapes, overriding the default rule
;"DNAM - Type" equals Terminal = holotape_terminal


[WEAP]
; Added tag to all bayonets as knives
"FULL - Name" contains Bayonet=SPECIAL:AddKeyword:ma_Knife

; Note: WEAP records with INRD (naming rule) entry can't be tagged directly. 
;       The weapon will get the tag through the naming rules, which are also adjusted, so it will have a tag in the game.
;       You can add keywords with TagIdent SPECIAL:AddKeyword:* or first remove the INRD entry with SPECIAL:RemoveINRD 

;Example - Add the keywords ma_ChineseOfficerSword to all items with Katana in names
;"Full - Name" contains Katana = SPECIAL:AddKeyword:ma_ChineseOfficerSword

;Example - Remove the INRD completely, so you can directly tag the records name
;"Full - Name" contains Katana, INRD exists = SPECIAL:RemoveINRD
;"Full - Name" contains Katana = RevDword

